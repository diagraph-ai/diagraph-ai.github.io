{"props":{"id":"node-1745239173171","x":100,"y":99,"format":"node","title":"Python","showChildren":true},"nodes":{"node-1745583603366":{"props":{"id":"node-1745583603366","x":10,"y":60,"format":"text","title":"New","text":"Introduction","toolTipText":"- Python created in 1990 by Guido van Rossum<div>- Python 3 is released in 2008</div><div><br></div><div><i>Features</i></div><div>- easy to use language</div><div>- readability of code</div><div>- clear, logical code that is easy to read and learn</div><div>- lots of existing libraries and frameworks, for wide variety of tasks</div><div>- optimising developer time rather than computer processing time</div><div>- automate simple tasks (file operations, web operations, excel, pdf)</div><div>- machine learning and data science</div><div>- creating websites using Django and Flask</div><div>- creating interactive dashboards using plotly and dash</div>","width":100,"height":30,"toolTipWidth":455,"toolTipHeight":303}},"node-1745241494206":{"props":{"id":"node-1745241494206","x":18,"y":115,"format":"node","title":"Syntax","showChildren":true},"nodes":{"node-1745584246385":{"props":{"id":"node-1745584246385","x":153,"y":56,"format":"text","title":"New","text":"Operators","toolTipText":"<div><i>Arithmetic Operators</i></div><div><div>+<span style=\"white-space: pre;\">\t</span>Addition<span style=\"white-space: pre;\">\t</span>x + y<span style=\"white-space: pre;\">\t</span></div><div>-<span style=\"white-space: pre;\">\t</span>Subtraction<span style=\"white-space: pre;\">\t</span>x - y<span style=\"white-space: pre;\">\t</span></div><div>*<span style=\"white-space: pre;\">\t</span>Multiplication<span style=\"white-space: pre;\">\t</span>x * y<span style=\"white-space: pre;\">\t</span></div><div>/<span style=\"white-space: pre;\">\t</span>Division<span style=\"white-space: pre;\">\t</span>x / y<span style=\"white-space: pre;\">\t</span></div><div>%<span style=\"white-space: pre;\">\t</span>Modulus<span style=\"white-space: pre;\">\t</span>x % y<span style=\"white-space: pre;\">\t</span></div><div>**<span style=\"white-space: pre;\">\t</span>Exponentiation<span style=\"white-space: pre;\">\t</span>x ** y<span style=\"white-space: pre;\">\t</span></div><div>//<span style=\"white-space: pre;\">\t</span>Floor division<span style=\"white-space: pre;\">\t</span>x // y</div><div><br></div><div><i>Assignment Operators</i></div><div><div>=<span style=\"white-space: pre;\">\t</span>x = 5<span style=\"white-space: pre;\">\t</span>x = 5<span style=\"white-space: pre;\">\t</span></div><div>+=<span style=\"white-space: pre;\">\t</span>x += 3<span style=\"white-space: pre;\">\t</span>x = x + 3<span style=\"white-space: pre;\">\t</span></div><div>-=<span style=\"white-space: pre;\">\t</span>x -= 3<span style=\"white-space: pre;\">\t</span>x = x - 3<span style=\"white-space: pre;\">\t</span></div><div>*=<span style=\"white-space: pre;\">\t</span>x *= 3<span style=\"white-space: pre;\">\t</span>x = x * 3<span style=\"white-space: pre;\">\t</span></div><div>/=<span style=\"white-space: pre;\">\t</span>x /= 3<span style=\"white-space: pre;\">\t</span>x = x / 3<span style=\"white-space: pre;\">\t</span></div><div>%=<span style=\"white-space: pre;\">\t</span>x %= 3<span style=\"white-space: pre;\">\t</span>x = x % 3<span style=\"white-space: pre;\">\t</span></div><div>//=<span style=\"white-space: pre;\">\t</span>x //= 3<span style=\"white-space: pre;\">\t</span>x = x // 3<span style=\"white-space: pre;\">\t</span></div><div>**=<span style=\"white-space: pre;\">\t</span>x **= 3<span style=\"white-space: pre;\">\t</span>x = x ** 3<span style=\"white-space: pre;\">\t</span></div><div>&amp;=<span style=\"white-space: pre;\">\t</span>x &amp;= 3<span style=\"white-space: pre;\">\t</span>x = x &amp; 3<span style=\"white-space: pre;\">\t</span></div><div>|=<span style=\"white-space: pre;\">\t</span>x |= 3<span style=\"white-space: pre;\">\t</span>x = x | 3<span style=\"white-space: pre;\">\t</span></div><div>^=<span style=\"white-space: pre;\">\t</span>x ^= 3<span style=\"white-space: pre;\">\t</span>x = x ^ 3<span style=\"white-space: pre;\">\t</span></div><div>&gt;&gt;=<span style=\"white-space: pre;\">\t</span>x &gt;&gt;= 3<span style=\"white-space: pre;\">\t</span>x = x &gt;&gt; 3<span style=\"white-space: pre;\">\t</span></div><div>&lt;&lt;=<span style=\"white-space: pre;\">\t</span>x &lt;&lt;= 3<span style=\"white-space: pre;\">\t</span>x = x &lt;&lt; 3<span style=\"white-space: pre;\">\t</span></div><div>:=<span style=\"white-space: pre;\">\t</span>print(x := 3)<span style=\"white-space: pre;\">\t</span>x = 3 print(x)</div></div><div><br></div></div><div><i>Comparison Operators</i></div><div>==<span style=\"white-space: pre;\">\t</span>Equal<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x == y<span style=\"white-space: pre;\">\t</span></div><div>!=<span style=\"white-space: pre;\">\t</span>Not equal<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x != y<span style=\"white-space: pre;\">\t</span></div><div>&gt;<span style=\"white-space: pre;\">\t</span>Greater than<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &gt; y<span style=\"white-space: pre;\">\t</span></div><div>&lt;<span style=\"white-space: pre;\">\t</span>Less than<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt; y<span style=\"white-space: pre;\">\t</span></div><div>&gt;=<span style=\"white-space: pre;\">\t</span>Greater than or equal to<span style=\"white-space: pre;\">\t</span>&nbsp;x &gt;= y<span style=\"white-space: pre;\">\t</span></div><div>&lt;=<span style=\"white-space: pre;\">\t</span>Less than or equal to<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;x &lt;= y</div><div><br></div><div><i>Logical Operators</i></div><div><div>and&nbsp;<span style=\"white-space: pre;\">\t</span>Returns True if both statements are true<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x &lt; 5 and&nbsp; x &lt; 10<span style=\"white-space: pre;\">\t</span></div><div>or<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; Returns True if one of the statements is true<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x &lt; 5 or x &lt; 4<span style=\"white-space: pre;\">\t</span></div><div>not<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; Reverse the result, returns False if the result is true<span style=\"white-space: pre;\">\t</span>not(x &lt; 5 and x &lt; 10)</div></div><div><br></div><div><i>Identity Operators</i></div><div><div>is&nbsp;<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; Returns True if both variables are the same object<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; x is y<span style=\"white-space: pre;\">\t</span></div><div>is not<span style=\"white-space: pre;\">\t</span>Returns True if both variables are not the same object<span style=\"white-space: pre;\">\t</span>x is not y</div><div><br></div><div><i>Membership Operators</i></div><div><div>in&nbsp;<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; Returns True if a sequence with the specified value is present in the object<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; x in y<span style=\"white-space: pre;\">\t</span></div><div>not in<span style=\"white-space: pre;\">\t</span>Returns True if a sequence with the specified value is not present in the object<span style=\"white-space: pre;\">\t</span>x not in y</div><div><br></div><div><i>Bitwise Operators</i></div><div><div>&amp;&nbsp;<span style=\"white-space: pre;\">\t</span>AND<span style=\"white-space: pre;\">\t</span>Sets each bit to 1 if both bits are 1<span style=\"white-space: pre;\">\t</span>x &amp; y<span style=\"white-space: pre;\">\t</span></div><div>|<span style=\"white-space: pre;\">\t</span>OR<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp;Sets each bit to 1 if one of two bits is 1<span style=\"white-space: pre;\">\t</span>x | y<span style=\"white-space: pre;\">\t</span></div><div>^<span style=\"white-space: pre;\">\t</span>XOR<span style=\"white-space: pre;\">\t</span>Sets each bit to 1 if only one of two bits is 1<span style=\"white-space: pre;\">\t</span>x ^ y<span style=\"white-space: pre;\">\t</span></div><div>~<span style=\"white-space: pre;\">\t</span>NOT<span style=\"white-space: pre;\">\t</span>Inverts all the bits<span style=\"white-space: pre;\">\t</span>~x<span style=\"white-space: pre;\">\t</span></div><div>&lt;&lt;<span style=\"white-space: pre;\">\t</span>Zero fill left shift<span style=\"white-space: pre;\">\t</span>Shift left by pushing zeros in from the right and let the leftmost bits fall off<span style=\"white-space: pre;\">\t</span>x &lt;&lt; 2<span style=\"white-space: pre;\">\t</span></div><div>&gt;&gt;<span style=\"white-space: pre;\">\t</span>Signed right shift<span style=\"white-space: pre;\">\t</span>Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off<span style=\"white-space: pre;\">\t</span>x &gt;&gt; 2</div></div></div></div>","width":100,"height":30,"toolTipWidth":584,"toolTipHeight":280}},"node-1745583643664":{"props":{"id":"node-1745583643664","x":21,"y":56,"format":"text","title":"New","text":"Variables","toolTipText":"- Variables are used to manage values<div>- used to name a value, so that we can refer later</div><div>- can not start with a number</div><div>- no spaces, but _ can be usd</div><div>- no special characters</div><div>- PEP8 best practice is that names are lowercase</div><div>- Python uses dynamic typing, i.e., reassign variable to another type of data</div><div>&nbsp;&nbsp;<b>my_books = 10&nbsp;&nbsp;<i>&nbsp;</i></b></div>","width":100,"height":30,"toolTipWidth":494,"toolTipHeight":194}},"node-1745241500448":{"props":{"id":"node-1745241500448","x":22,"y":111,"format":"node","title":"Data Types"},"nodes":{"node-1745242495676":{"props":{"id":"node-1745242495676","x":29,"y":52,"format":"text","title":"New","text":"<div>Text Type:<span style=\"white-space:pre\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; str</div><div>Numeric Types:<span style=\"white-space:pre\">\t</span>int, float, complex</div><div>Sequence Types:<span style=\"white-space:pre\">\t</span>list, tuple, range</div><div>Mapping Type:<span style=\"white-space:pre\">\t</span>dict</div><div>Set Types:<span style=\"white-space:pre\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; set, frozenset</div><div>Boolean Type:<span style=\"white-space:pre\">\t</span>bool</div><div>Binary Types:<span style=\"white-space:pre\">\t</span>bytes, bytearray, memoryview</div><div>None Type:<span style=\"white-space:pre\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; NoneType</div>","width":374.9998779296875,"height":183.99856567382812,"toolTipWidth":100,"toolTipHeight":50}},"node-1745583946461":{"props":{"id":"node-1745583946461","x":141,"y":258,"format":"text","title":"New","text":"Floats","toolTipText":"- to represent numbers with decimal point<div>i = 2.232</div>","width":100,"height":29.999998092651367,"toolTipWidth":298,"toolTipHeight":63}},"node-1745583967270":{"props":{"id":"node-1745583967270","x":256,"y":261,"format":"text","title":"New","text":"Strings","toolTipText":"- to represent strings, sequence of characters<div>- in either single or double quotes</div><div>- we can use indexing, slicing on string(str)<br><div>s&nbsp; &nbsp; &nbsp; &nbsp; = \"hello\"</div></div><div>index =&nbsp; 01234&nbsp; &nbsp;(ex: s[1] which is e)</div><div>reverse-Index = 0-4-3-2-1 (ex: s[-1] which is o)</div><div>Slicing syntax : s[start:stop:step]</div><div>(ex: s[0:2:1] which is \"hel\")</div><div><br></div><div><i>Methods</i></div><div>+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- for concatenation</div><div>*&nbsp; number&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - repeat number of times</div><div>etc...</div><div><br></div><div>.format()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - for string interpolation</div><div>f'hi {name}'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - string interpolation</div>","width":100,"height":30,"toolTipWidth":484,"toolTipHeight":244}},"node-1745584134644":{"props":{"id":"node-1745584134644","x":377,"y":309,"format":"text","title":"New","text":"Maps","toolTipText":"- to represent unordered key value pairs<div>m = {\"key1\": \"value1\", \"key2\": \"value2\"}</div>","width":100,"height":29.999998092651367,"toolTipWidth":295,"toolTipHeight":75}},"node-1745584066317":{"props":{"id":"node-1745584066317","x":25,"y":307,"format":"text","title":"New","text":"Lists","toolTipText":"- to represent ordered sequence of objects<div>l = [12, \"233\"]</div>","width":100,"height":30,"toolTipWidth":297,"toolTipHeight":68}},"node-1745583930349":{"props":{"id":"node-1745583930349","x":24,"y":258,"format":"text","title":"New","text":"Integers","toolTipText":"- to represent whole numbers<div>i = 100</div>","width":100,"height":30,"toolTipWidth":217,"toolTipHeight":66}},"node-1745584085434":{"props":{"id":"node-1745584085434","x":140,"y":309,"format":"text","title":"New","text":"Tuples","toolTipText":"- ordered immutable sequence of objects<div>t = (100, \"test\")</div>","width":100,"height":29.999998092651367,"toolTipWidth":288,"toolTipHeight":73}},"node-1745584032416":{"props":{"id":"node-1745584032416","x":373,"y":261,"format":"text","title":"New","text":"Booleans","toolTipText":"- logical representation of True or False<div>b = True</div>","width":100,"height":29.999998092651367,"toolTipWidth":279,"toolTipHeight":70}},"node-1745584206476":{"props":{"id":"node-1745584206476","x":256,"y":310,"format":"text","title":"New","text":"Sets","toolTipText":"- unordered collection of unique objects<div>s = {100, \"test\"}</div>","width":100,"height":30,"toolTipWidth":291,"toolTipHeight":64}}}},"node-1745584272424":{"props":{"id":"node-1745584272424","x":167.83942413330078,"y":111,"format":"text","title":"New","text":"Statements","toolTipText":"<div><i>Decision control statements</i></div><div>if b &gt; a:</div><div>&nbsp; print(\"b is greater than a\")</div><div>elif a == b:</div><div>&nbsp; print(\"a and b are equal\")</div><div>else:</div><div>&nbsp; print(\"a is greater than b\")</div><div><i><br></i></div><div><i>Iterative statements</i></div><div><div>fruits = [\"apple\", \"banana\", \"cherry\"]</div><div>for x in fruits:</div><div>&nbsp; print(x)</div></div><div><br></div><div><div>while i &lt; 6:</div><div>&nbsp; print(i)</div><div>else:</div><div>&nbsp; //some code</div><div>break - breaks out of the closest loop</div><div>continue - goes to the top of the closest loop</div><div>pass- does nothing at all</div></div>","width":100,"height":30,"toolTipWidth":405,"toolTipHeight":410}}}}}}